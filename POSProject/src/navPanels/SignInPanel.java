package navPanels;

import java.awt.Color;
import java.awt.Font;
import java.awt.GridLayout;

import javax.swing.BorderFactory;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JPasswordField;
import javax.swing.JRootPane;
import javax.swing.JTextField;
import javax.swing.SwingConstants;
import javax.swing.SwingUtilities;

import expections.CannotPerformOperationException;
import expections.InvalidHashException;
import util.ButtonManager;
import util.InputManager;
import util.Manager;
import util.PasswordManager;
import util.SQLAccess;

public class SignInPanel extends JPanel{
	
	SQLAccess sqlAccess = new SQLAccess();
	
	// text fields
	JTextField usernameField;
	JPasswordField passwordField;
	
	// labels
	JLabel passwordLabel, usernameLabel;
	
	// place holder labels to fill the grid layout
	JLabel[] placeholders;
	int placeholdersSize = 7;
	

	// users info
	String username, password, hash, currentUserCorrectHash;
	
	
	// setting up the panel and adding its components to it
	public SignInPanel() {
		
		this.setLayout(new GridLayout(3,4));
		this.setBackground(Manager.getColor("Body"));
		this.setBorder(BorderFactory.createEmptyBorder(250, 350, 250, 350));
		this.setFocusable(true);
		
		placeholders = new JLabel[placeholdersSize];
		for (int i = 0; i < placeholdersSize; i++) {
			placeholders[i]= new JLabel();
		}
			
		// init labels
		passwordLabel = new JLabel("Password:   ", SwingConstants.RIGHT);
		passwordLabel.setForeground(Color.decode("#424242"));
		passwordLabel.setFont(new Font("Serif", Font.BOLD, 18));
		
		usernameLabel = new JLabel("User:   ", SwingConstants.RIGHT);
		usernameLabel.setForeground(Color.decode("#424242"));
		usernameLabel.setFont(new Font("Serif", Font.BOLD, 18));
		
		usernameField = InputManager.getUsernameField();
		passwordField = InputManager.getPasswordField();

		// the place holders just allow the labels and input fields to be centered and look nice
		this.add(usernameLabel);
		this.add(usernameField);
		this.add(placeholders[0]);
		this.add(placeholders[1]);
		this.add(placeholders[2]);
		this.add(placeholders[3]);
		this.add(placeholders[4]);
		this.add(placeholders[5]);
		this.add(passwordLabel);
		this.add(passwordField);
		this.add(placeholders[6]);
		this.add(ButtonManager.getButton("Sign In"));
	}


	// setting default stuff for input - order is important -  must be called after windows are added to main frame and made visible
	public void setFocusToInputField() {
		// sets the cursor to the first input field by default
		usernameField.requestFocusInWindow();
	}
	
	public void setDefaultButton(){
		// sets the default button to the sign in button so that pressing enter triggers the on-screen button
		JRootPane rootPane = SwingUtilities.getRootPane(ButtonManager.getButton("Sign In")); 
		rootPane.setDefaultButton(ButtonManager.getButton("Sign In"));
	}
	
	
	// Note that salt is stored in the hash string itself, so not saved in the database
	public boolean checkCredentials() {
		boolean result = false;
		
		// current user
		username = InputManager.getUsernameField().getText();
		
		// correct hash (the hash that was stored when they first set up their account
		try {
			currentUserCorrectHash = sqlAccess.runFetchQuery("select Hash from Credentials where UserName = \"" + username + "\"");
		} catch (Exception e) {
			JOptionPane.showMessageDialog(Manager.getView(),"ERROR: \nUsername or password is incorrect: "
					+ "\nPlease try again.");
		}

		// password input by the user
		password = InputManager.getPasswordField().getText();

		/*
		 *  want to give an error message if the user name is not found, but want to give the error there rather than right when the 
		 *  exception is caught so that it is not clear whether it was the user name or the password that was incorrect
		 */
		if (currentUserCorrectHash == null) {
			JOptionPane.showMessageDialog(Manager.getView(),"ERROR: \nUsername or password is incorrect: "
					+ "\nPlease try again.");	
			result = false;
		}
		else {
			// verifying the hash generated by the password given by the user against the correct hash stored in the database
			try {
				// the following inputs are: (password, correct hash)
				if (PasswordManager.verifyPassword(password, currentUserCorrectHash)) {
					result = true;
				}
				else {
					JOptionPane.showMessageDialog(Manager.getView(),"ERROR: \nUsername or password is incorrect: "
							+ "\nPlease try again.");	
					result = false;
				}

			} catch (CannotPerformOperationException e) {
				e.printStackTrace();
			} catch (InvalidHashException e) {
				e.printStackTrace();
			}
		}
		return result;
	}

}









